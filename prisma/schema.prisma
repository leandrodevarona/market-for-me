// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  markets Market[]
  cart    Cart[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?

  contact Contact

  exchangeRates ExchangeRates

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  products Product[]

  buys Buy[]
}

// Address is an embedded document
type Contact {
  address String?
  phone1  String
  phone2  String?
}

type ExchangeRateCurrency {
  value        Float
  editedByUser Boolean @default(false)
}

type ExchangeRates {
  USD ExchangeRateCurrency
  EUR ExchangeRateCurrency
  MLC ExchangeRateCurrency
  CUP ExchangeRateCurrency
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("New product")

  price    Float    @default(1.0)
  currency Currency @default(USD)

  stock Int @default(0)

  description String?
  imageUrls   String[]

  market   Market @relation(fields: [marketId], references: [id])
  marketId String @db.ObjectId

  isUpdated Boolean @default(false)

  cartItems CartItem[]
}

enum Currency {
  USD
  EUR
  MLC
  CUP
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.ObjectId

  cartItems CartItem[]
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String  @db.ObjectId

  @@unique([cartId, productId])
}

type BuyProduct {
  productId String
  quantity  Int
}

model Buy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  market   Market? @relation(fields: [marketId], references: [id], onDelete: SetNull)
  marketId String? @db.ObjectId

  products BuyProduct[]

  invoiceNumber    String @unique
  invoicePdfBase64 String

  returnedStock Boolean @default(false)
}
